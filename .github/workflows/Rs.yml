# ============================================================================
# Reset.yml - Fixed Database Reset Workflow
# ============================================================================

name: Initialize Database

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Database initialization action'
        required: true
        default: 'init-and-seed'
        type: choice
        options:
          - init-only
          - init-and-seed
          - seed-only
          - check-status
          - drop-and-recreate
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  initialize-database:
    name: Initialize Database
    runs-on: ubuntu-latest
    
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      # ✅ FIX: Install psycopg2-binary FIRST, before other dependencies
      - name: Install PostgreSQL driver
        working-directory: LiquidSuite
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary
      
      - name: Install dependencies
        working-directory: LiquidSuite
        run: |
          pip install -r requirements.txt
      
      - name: Verify psycopg2 installation
        run: |
          python -c "import psycopg2; print(f'✅ psycopg2 version: {psycopg2.__version__}')"
      
      - name: Test database connection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          import psycopg2
          from urllib.parse import urlparse
          
          db_url = os.getenv('DATABASE_URL')
          if not db_url:
              print("❌ DATABASE_URL not set!")
              exit(1)
          
          # Parse connection string
          parsed = urlparse(db_url)
          
          try:
              conn = psycopg2.connect(
                  host=parsed.hostname,
                  port=parsed.port or 5432,
                  user=parsed.username,
                  password=parsed.password,
                  database=parsed.path[1:]  # Remove leading /
              )
              print("✅ Database connection successful!")
              
              cursor = conn.cursor()
              cursor.execute("SELECT version();")
              version = cursor.fetchone()[0]
              print(f"PostgreSQL version: {version}")
              
              cursor.close()
              conn.close()
              
          except Exception as e:
              print(f"❌ Connection failed: {e}")
              exit(1)
          PYTHON
      
      - name: Drop all tables (if drop-and-recreate)
        if: github.event.inputs.action == 'drop-and-recreate'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "🗑️  Dropping all tables..."
          echo ""
          
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text
          
          engine = create_engine(os.getenv('DATABASE_URL'))
          
          with engine.connect() as conn:
              trans = conn.begin()
              try:
                  # Drop all tables in cascade mode
                  result = conn.execute(text("""
                      SELECT tablename 
                      FROM pg_tables 
                      WHERE schemaname = 'public'
                  """))
                  
                  tables = [row[0] for row in result]
                  print(f"Found {len(tables)} tables to drop")
                  
                  for table in tables:
                      print(f"  Dropping {table}...")
                      conn.execute(text(f'DROP TABLE IF EXISTS "{table}" CASCADE'))
                  
                  trans.commit()
                  print("\n✅ All tables dropped!")
                  
              except Exception as e:
                  trans.rollback()
                  print(f"❌ Error: {e}")
                  raise
          PYTHON
      
      - name: Check and fix schema issues
        if: github.event.inputs.action != 'drop-and-recreate' && github.event.inputs.action != 'check-status'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Checking current schema..."
          echo "============================="
          echo ""
          
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text, inspect
          
          engine = create_engine(os.getenv('DATABASE_URL'))
          
          with engine.connect() as conn:
              trans = conn.begin()
              try:
                  # Check if tables exist
                  inspector = inspect(engine)
                  tables = inspector.get_table_names()
                  
                  if 'bank_transactions' not in tables:
                      print("ℹ️  bank_transactions table doesn't exist yet - will be created")
                      trans.commit()
                      exit(0)
                  
                  # Check schema
                  result = conn.execute(text("""
                      SELECT column_name, data_type
                      FROM information_schema.columns 
                      WHERE table_name = 'bank_transactions' 
                      AND column_name IN ('category', 'category_id', 'debits', 'credits', 
                                          'deposit', 'withdrawal', 'date', 'transaction_date')
                      ORDER BY column_name
                  """))
                  
                  columns = {row[0]: row[1] for row in result}
                  print("Current columns in bank_transactions:")
                  for col, dtype in columns.items():
                      print(f"  - {col}: {dtype}")
                  
                  needs_migration = False
                  
                  # Check for old schema issues
                  if 'category' in columns and 'category_id' not in columns:
                      print("\n⚠️  Issue 1: Old 'category' column found (should be 'category_id')")
                      needs_migration = True
                  
                  if 'debits' in columns or 'credits' in columns:
                      if 'deposit' not in columns or 'withdrawal' not in columns:
                          print("\n⚠️  Issue 2: Using debits/credits (should be deposit/withdrawal)")
                          needs_migration = True
                  
                  if 'transaction_date' in columns and 'date' not in columns:
                      print("\n⚠️  Issue 3: Using transaction_date (should be date)")
                      needs_migration = True
                  
                  if needs_migration:
                      print("\n🔧 Applying schema fixes...")
                      
                      # Fix 1: category → category_id
                      if 'category' in columns:
                          print("  Fixing: category → category_id")
                          conn.execute(text("ALTER TABLE bank_transactions DROP COLUMN category CASCADE"))
                          conn.execute(text("ALTER TABLE bank_transactions ADD COLUMN category_id INTEGER"))
                          conn.execute(text("""
                              ALTER TABLE bank_transactions 
                              ADD CONSTRAINT fk_bank_transactions_category_id 
                              FOREIGN KEY (category_id) REFERENCES transaction_categories(id) 
                              ON DELETE SET NULL
                          """))
                      
                      # Fix 2: debits/credits → withdrawal/deposit
                      if 'debits' in columns and 'deposit' not in columns:
                          print("  Fixing: debits → withdrawal, credits → deposit")
                          conn.execute(text("ALTER TABLE bank_transactions RENAME COLUMN debits TO withdrawal"))
                          conn.execute(text("ALTER TABLE bank_transactions RENAME COLUMN credits TO deposit"))
                      
                      # Fix 3: transaction_date → date
                      if 'transaction_date' in columns and 'date' not in columns:
                          print("  Fixing: transaction_date → date")
                          conn.execute(text("ALTER TABLE bank_transactions RENAME COLUMN transaction_date TO date"))
                      
                      trans.commit()
                      print("\n✅ Schema fixes applied!")
                  else:
                      trans.commit()
                      print("\n✅ Schema is already correct!")
                  
              except Exception as e:
                  trans.rollback()
                  print(f"\n❌ Error: {e}")
                  import traceback
                  traceback.print_exc()
                  raise
          PYTHON
      
      - name: Initialize Database Tables
        if: |
          github.event.inputs.action == 'init-only' || 
          github.event.inputs.action == 'init-and-seed' ||
          github.event.inputs.action == 'drop-and-recreate'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "📊 Creating/updating database tables..."
          echo ""
          python scripts/init_db.py init
          echo ""
          echo "✅ Database initialization complete!"
      
      - name: Seed Transaction Categories
        if: |
          github.event.inputs.action == 'seed-only' || 
          github.event.inputs.action == 'init-and-seed' ||
          github.event.inputs.action == 'drop-and-recreate'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "🌱 Seeding transaction categories..."
          echo ""
          python scripts/seed_categories.py seed
          echo ""
          echo "✅ Categories seeded successfully!"
      
      - name: Check Database Status
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "🔍 Verifying database status..."
          echo ""
          python scripts/init_db.py check
      
      - name: Verify schema correctness
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo ""
          echo "✅ Final schema verification..."
          echo ""
          
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text, inspect
          
          engine = create_engine(os.getenv('DATABASE_URL'))
          inspector = inspect(engine)
          
          # Check bank_transactions columns
          columns = {col['name']: col['type'] for col in inspector.get_columns('bank_transactions')}
          
          expected = ['date', 'posting_date', 'description', 'deposit', 'withdrawal', 
                      'balance', 'category_id', 'reference_number', 'user_id']
          
          print("Expected columns in bank_transactions:")
          missing = []
          for col in expected:
              if col in columns:
                  print(f"  ✅ {col}")
              else:
                  print(f"  ❌ {col} - MISSING!")
                  missing.append(col)
          
          if missing:
              print(f"\n⚠️  Missing columns: {', '.join(missing)}")
          else:
              print("\n✅ All required columns present!")
          PYTHON
      
      - name: List Categories
        if: |
          github.event.inputs.action == 'seed-only' || 
          github.event.inputs.action == 'init-and-seed' ||
          github.event.inputs.action == 'drop-and-recreate'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "📋 Transaction Categories:"
          echo ""
          python scripts/seed_categories.py list
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "📊 Operation Summary"
          echo "===================="
          echo "Status: ✅ SUCCESS"
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          case "${{ github.event.inputs.action }}" in
            init-only)
              echo "✅ Database tables created"
              echo "Next: Run with 'seed-only' to add categories"
              ;;
            init-and-seed)
              echo "✅ Database initialized and seeded"
              echo "✅ Ready to use!"
              ;;
            seed-only)
              echo "✅ Categories added"
              ;;
            check-status)
              echo "✅ Database status checked"
              ;;
            drop-and-recreate)
              echo "✅ Database dropped and recreated"
              echo "✅ Fresh database ready!"
              ;;
          esac
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo ""
          echo "❌ Operation Failed"
          echo "===================="
          echo ""
          echo "Common issues:"
          echo "  1. Missing psycopg2-binary"
          echo "  2. DATABASE_URL not set or invalid"
          echo "  3. Database connection failed"
          echo "  4. Schema conflicts"
          echo ""
          echo "Check logs above for details."
