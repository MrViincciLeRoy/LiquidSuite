# ============================================================================
# one-click-database-fix.yml - One-Click Database Fix
# ============================================================================
# Automatically detects and fixes schema issues
# ============================================================================

name: üîß One-Click Database Fix

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "FIX IT" to proceed'
        required: true
        type: string

jobs:
  auto-fix:
    name: Auto Fix Database
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "FIX IT" ]; then
            echo "‚ùå Type 'FIX IT' to proceed"
            exit 1
          fi
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install
        working-directory: LiquidSuite
        run: |
          pip install --upgrade pip
          pip install psycopg2-binary
          pip install -r requirements.txt
      
      - name: Auto-Fix Schema
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: production
        run: |
          echo "üîß Auto-fixing database schema..."
          echo "================================="
          echo ""
          
          python << 'PYTHON_SCRIPT'
          import os
          from sqlalchemy import text, create_engine
          
          engine = create_engine(os.getenv('DATABASE_URL'))
          
          with engine.connect() as conn:
              trans = conn.begin()
              try:
                  print("Checking bank_transactions table...")
                  
                  # Get current columns
                  result = conn.execute(text("""
                      SELECT column_name 
                      FROM information_schema.columns 
                      WHERE table_name = 'bank_transactions'
                      AND column_name IN ('category', 'category_id')
                  """))
                  cols = [r[0] for r in result]
                  
                  # Fix if needed
                  if 'category' in cols and 'category_id' not in cols:
                      print("  ‚ö†Ô∏è  Old schema detected")
                      print("  üîÑ Migrating category ‚Üí category_id...")
                      
                      conn.execute(text("ALTER TABLE bank_transactions DROP COLUMN category CASCADE"))
                      conn.execute(text("ALTER TABLE bank_transactions ADD COLUMN category_id INTEGER"))
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD CONSTRAINT fk_bank_transactions_category_id 
                          FOREIGN KEY (category_id) REFERENCES transaction_categories(id) 
                          ON DELETE SET NULL
                      """))
                      print("  ‚úÖ Fixed!")
                      
                  elif 'category_id' in cols:
                      print("  ‚úÖ Already correct!")
                  else:
                      print("  ‚ö†Ô∏è  Column missing - will be created")
                  
                  trans.commit()
                  print("\n‚úÖ Schema is correct!")
                  
              except Exception as e:
                  trans.rollback()
                  print(f"\n‚ùå Error: {e}")
                  raise
          PYTHON_SCRIPT
      
      - name: Verify
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: production
        run: |
          echo ""
          echo "üîç Verifying database..."
          python scripts/init_db.py check
      
      - name: Done
        run: |
          echo ""
          echo "‚úÖ Database fixed and ready!"
