# ============================================================================
# .github/workflows/fix-statement-id.yml
# Emergency fix for missing statement_id column in bank_transactions
# ============================================================================
name: Fix Statement ID Column

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  fix-statement-id:
    name: Add statement_id Column
    runs-on: ubuntu-latest
    
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install psycopg2 and SQLAlchemy
        run: |
          pip install psycopg2-binary sqlalchemy
      
      - name: Fix Database URL Format
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Convert postgres:// to postgresql://
          FIXED_URL="${DATABASE_URL//postgres:\/\//postgresql:\/\/}"
          echo "FIXED_DATABASE_URL=$FIXED_URL" >> $GITHUB_ENV
          echo "✅ Database URL format fixed for SQLAlchemy 2.x"
      
      - name: Test Database Connection
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          import psycopg2
          from urllib.parse import urlparse
          
          print("=" * 70)
          print("  TESTING DATABASE CONNECTION")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          if not db_url:
              print("❌ DATABASE_URL not set!")
              exit(1)
          
          parsed = urlparse(db_url)
          
          try:
              conn = psycopg2.connect(
                  host=parsed.hostname,
                  port=parsed.port or 5432,
                  user=parsed.username,
                  password=parsed.password,
                  database=parsed.path[1:]
              )
              print("✅ Database connection successful!")
              
              cursor = conn.cursor()
              cursor.execute("SELECT version();")
              version = cursor.fetchone()[0]
              print(f"PostgreSQL version: {version[:50]}...")
              
              cursor.close()
              conn.close()
              
          except Exception as e:
              print(f"❌ Connection failed: {e}")
              exit(1)
          PYTHON
      
      - name: Check Current Schema
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text, inspect
          
          print("\n" + "=" * 70)
          print("  CHECKING CURRENT SCHEMA")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          with engine.connect() as conn:
              # Check if bank_transactions table exists
              inspector = inspect(engine)
              tables = inspector.get_table_names()
              
              if 'bank_transactions' not in tables:
                  print("\n❌ bank_transactions table doesn't exist!")
                  exit(1)
              
              print("\n✅ bank_transactions table exists")
              
              # Get all columns
              columns = inspector.get_columns('bank_transactions')
              
              print("\n📋 Current columns in bank_transactions:")
              for col in sorted(columns, key=lambda x: x['name']):
                  print(f"  - {col['name']:<30} {str(col['type']):<20}")
              
              # Check specifically for statement_id
              col_names = [col['name'] for col in columns]
              
              if 'statement_id' in col_names:
                  print("\n✅ statement_id column ALREADY EXISTS")
                  print("   No action needed!")
                  exit(0)
              else:
                  print("\n⚠️  statement_id column MISSING")
                  print("   Will add it in next step...")
          PYTHON
      
      - name: Fix bank_account_id Constraint
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text
          
          print("\n" + "=" * 70)
          print("  FIXING bank_account_id CONSTRAINT")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          with engine.connect() as conn:
              trans = conn.begin()
              try:
                  print("\n🔧 Making bank_account_id nullable...")
                  conn.execute(text("""
                      ALTER TABLE bank_transactions 
                      ALTER COLUMN bank_account_id DROP NOT NULL
                  """))
                  trans.commit()
                  print("   ✅ bank_account_id is now nullable")
              except Exception as e:
                  trans.rollback()
                  # Already nullable, that's fine
                  print(f"   ℹ️  {e}")
          PYTHON
      
      - name: Add All Missing Columns
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text, inspect
          
          print("\n" + "=" * 70)
          print("  ADDING ALL MISSING COLUMNS")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          # Define all required columns with their SQL types
          required_columns = {
              'statement_id': 'INTEGER',
              'erpnext_journal_entry': 'VARCHAR(100)',
              'erpnext_error': 'TEXT',
              'erpnext_id': 'VARCHAR(100)',
              'erpnext_synced': 'BOOLEAN DEFAULT FALSE',
              'erpnext_sync_date': 'TIMESTAMP',
              'category_id': 'INTEGER',
              'tags': 'VARCHAR(500)',
              'notes': 'TEXT',
              'is_reconciled': 'BOOLEAN DEFAULT FALSE',
              'reconciled_date': 'TIMESTAMP',
              'invoice_id': 'INTEGER',
              'currency': 'VARCHAR(3) DEFAULT \'ZAR\'',
              'unallocated_amount': 'NUMERIC(15, 2)',
          }
          
          with engine.connect() as conn:
              inspector = inspect(engine)
              existing_columns = [col['name'] for col in inspector.get_columns('bank_transactions')]
              
              print(f"\n📋 Existing columns: {len(existing_columns)}")
              print(f"📋 Required columns: {len(required_columns)}")
              
              missing_columns = {k: v for k, v in required_columns.items() if k not in existing_columns}
              
              if not missing_columns:
                  print("\n✅ All columns already exist!")
                  exit(0)
              
              print(f"\n⚠️  Missing {len(missing_columns)} columns:")
              for col in missing_columns:
                  print(f"  - {col}")
              
              trans = conn.begin()
              
              try:
                  # Add all missing columns
                  for col_name, col_type in missing_columns.items():
                      print(f"\n🔧 Adding {col_name}...")
                      conn.execute(text(f"""
                          ALTER TABLE bank_transactions 
                          ADD COLUMN IF NOT EXISTS {col_name} {col_type}
                      """))
                      print(f"   ✅ {col_name} added")
                  
                  # Add foreign keys if columns were added
                  if 'statement_id' in missing_columns:
                      print("\n🔧 Adding statement_id foreign key...")
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          DROP CONSTRAINT IF EXISTS fk_bank_transactions_statement
                      """))
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD CONSTRAINT fk_bank_transactions_statement 
                          FOREIGN KEY (statement_id) 
                          REFERENCES email_statements(id) 
                          ON DELETE SET NULL
                      """))
                      print("   ✅ Foreign key added")
                  
                  if 'category_id' in missing_columns:
                      print("\n🔧 Adding category_id foreign key...")
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          DROP CONSTRAINT IF EXISTS fk_bank_transactions_category_id
                      """))
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD CONSTRAINT fk_bank_transactions_category_id 
                          FOREIGN KEY (category_id) 
                          REFERENCES transaction_categories(id) 
                          ON DELETE SET NULL
                      """))
                      print("   ✅ Foreign key added")
                  
                  if 'invoice_id' in missing_columns:
                      print("\n🔧 Adding invoice_id foreign key...")
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          DROP CONSTRAINT IF EXISTS fk_bank_transactions_invoice
                      """))
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD CONSTRAINT fk_bank_transactions_invoice 
                          FOREIGN KEY (invoice_id) 
                          REFERENCES invoices(id) 
                          ON DELETE SET NULL
                      """))
                      print("   ✅ Foreign key added")
                  
                  # Add indexes
                  print("\n🔧 Adding indexes...")
                  if 'statement_id' in missing_columns:
                      conn.execute(text("""
                          CREATE INDEX IF NOT EXISTS idx_bank_transactions_statement_id 
                          ON bank_transactions(statement_id)
                      """))
                  if 'category_id' in missing_columns:
                      conn.execute(text("""
                          CREATE INDEX IF NOT EXISTS idx_bank_transactions_category_id 
                          ON bank_transactions(category_id)
                      """))
                  if 'erpnext_id' in missing_columns:
                      conn.execute(text("""
                          CREATE INDEX IF NOT EXISTS idx_bank_transactions_erpnext_id 
                          ON bank_transactions(erpnext_id)
                      """))
                  print("   ✅ Indexes created")
                  
                  trans.commit()
                  
                  print("\n" + "=" * 70)
                  print("✅ ALL COLUMNS ADDED SUCCESSFULLY!")
                  print("=" * 70)
                  
              except Exception as e:
                  trans.rollback()
                  print(f"\n❌ ERROR: {e}")
                  import traceback
                  traceback.print_exc()
                  exit(1)
          PYTHON
      
      - name: Verify Fix
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text, inspect
          
          print("\n" + "=" * 70)
          print("  VERIFYING ALL COLUMNS")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          # List of required columns from the error messages
          required = [
              'statement_id', 'erpnext_journal_entry', 'erpnext_error',
              'erpnext_id', 'erpnext_synced', 'erpnext_sync_date',
              'category_id', 'tags', 'notes', 'is_reconciled',
              'reconciled_date', 'invoice_id', 'currency', 'unallocated_amount'
          ]
          
          with engine.connect() as conn:
              inspector = inspect(engine)
              
              # Check columns
              columns = {col['name']: col for col in inspector.get_columns('bank_transactions')}
              
              print("\n✅ Verification checks:")
              
              missing = []
              for col in required:
                  if col in columns:
                      print(f"  ✅ {col:<30} {str(columns[col]['type']):<20}")
                  else:
                      print(f"  ❌ {col:<30} MISSING!")
                      missing.append(col)
              
              if missing:
                  print(f"\n❌ Still missing: {', '.join(missing)}")
                  exit(1)
              
              # Test the actual query that was failing
              print("\n🧪 Testing the query that caused the 500 error...")
              try:
                  result = conn.execute(text("""
                      SELECT 
                          id, statement_id, category_id, 
                          erpnext_journal_entry, erpnext_error,
                          description, date 
                      FROM bank_transactions 
                      LIMIT 1
                  """))
                  print("  ✅ Query executed successfully!")
                  
                  row = result.fetchone()
                  if row:
                      print(f"     Sample transaction: ID {row[0]}")
              except Exception as e:
                  print(f"  ❌ Query failed: {e}")
                  exit(1)
              
              print("\n" + "=" * 70)
              print("✅ ALL CHECKS PASSED!")
              print("=" * 70)
          PYTHON
      
      - name: Count Affected Records
        env:
          DATABASE_URL: ${{ env.FIXED_DATABASE_URL }}
        run: |
          python << 'PYTHON'
          import os
          from sqlalchemy import create_engine, text
          
          print("\n" + "=" * 70)
          print("  STATISTICS")
          print("=" * 70)
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          with engine.connect() as conn:
              # Total transactions
              result = conn.execute(text("SELECT COUNT(*) FROM bank_transactions"))
              total = result.scalar()
              print(f"\n📊 Total transactions: {total}")
              
              # Transactions without statement_id
              result = conn.execute(text("SELECT COUNT(*) FROM bank_transactions WHERE statement_id IS NULL"))
              without_statement = result.scalar()
              print(f"📊 Transactions without statement_id: {without_statement}")
              
              # Transactions with statement_id
              result = conn.execute(text("SELECT COUNT(*) FROM bank_transactions WHERE statement_id IS NOT NULL"))
              with_statement = result.scalar()
              print(f"📊 Transactions with statement_id: {with_statement}")
              
              if without_statement > 0:
                  print(f"\nℹ️  Note: {without_statement} existing transactions don't have a statement_id")
                  print("   This is normal - they were imported before this fix")
                  print("   New transactions will have proper statement associations")
          PYTHON
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "=" * 70
          echo "✅ FIX COMPLETED SUCCESSFULLY!"
          echo "=" * 70
          echo ""
          echo "Changes applied:"
          echo "  ✅ Added statement_id column"
          echo "  ✅ Added erpnext_journal_entry column"
          echo "  ✅ Added erpnext_error column"
          echo "  ✅ Added all other missing columns"
          echo "  ✅ Added foreign key constraints"
          echo "  ✅ Added indexes for performance"
          echo ""
          echo "Your application should now work correctly!"
          echo "All 500 errors related to missing columns are fixed."
          echo ""
          echo "Next steps:"
          echo "  1. Test your app - errors should be gone"
          echo "  2. Access /gmail/statements/15 successfully"
          echo "  3. All features should work properly now"
          echo ""
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo ""
          echo "❌ FIX FAILED"
          echo "=" * 70
          echo ""
          echo "The migration encountered an error."
          echo "Please check the logs above for details."
          echo ""
          echo "You can try:"
          echo "  1. Run the workflow again"
          echo "  2. Check DATABASE_URL secret is correct"
          echo "  3. Manually run the SQL commands"
          echo ""
