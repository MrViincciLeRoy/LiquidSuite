# ============================================================================
# .github/workflows/ci.yml - GitHub Actions CI/CD Pipeline
# ============================================================================
name: LSuite CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # ===========================
  # Lint and Code Quality
  # ===========================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          pip install -r requirements.txt
      
      - name: Run Black (code formatter check)
        run: black --check lsuite/ app.py config.py
        continue-on-error: true
      
      - name: Run Flake8 (linting)
        run: flake8 lsuite/ app.py config.py --max-line-length=100 --exclude=migrations
        continue-on-error: true

  # ===========================
  # Unit Tests
  # ===========================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: lsuite_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/lsuite_test" >> $GITHUB_ENV
          echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      - name: Initialize database
        run: |
          python -c "from lsuite import create_app; from lsuite.extensions import db; app = create_app('testing'); app.app_context().push(); db.create_all()"
      
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=lsuite --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-lsuite
        continue-on-error: true

  # ===========================
  # Security Scan
  # ===========================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Run Safety (dependency vulnerabilities)
        run: safety check --json
        continue-on-error: true
      
      - name: Run Bandit (security issues)
        run: bandit -r lsuite/ -f json
        continue-on-error: true

  # ===========================
  # Build Docker Image
  # ===========================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Deployment/Dockerfile
          push: false
          tags: lsuite:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm lsuite:${{ github.sha }} python -c "from lsuite import create_app; app = create_app('production'); print('âœ“ App imports successful')"

  # ===========================
  # Deploy to Render (main branch only)
  # ===========================
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Trigger Render Deploy
        run: |
          echo "Render auto-deploys from main branch"
          echo "Deploy will start automatically if render.yaml is configured"
      
      - name: Notify deployment
        run: |
          echo "ðŸš€ Deployment triggered for commit: ${{ github.sha }}"
          echo "Monitor deployment at: https://dashboard.render.com"

  # ===========================
  # Background Jobs (Scheduled)
  # ===========================
  scheduled-tasks:
    name: Run Scheduled Tasks
    runs-on: ubuntu-latest
    # Run every 15 minutes
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: lsuite
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set environment variables
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: |
          echo "Environment configured"
      
      - name: Run scheduled tasks
        run: |
          python -c "
          from lsuite import create_app
          from lsuite.bridge.services import CategorizationService
          
          app = create_app('production')
          with app.app_context():
              service = CategorizationService()
              categorized, total = service.auto_categorize_all()
              print(f'âœ“ Auto-categorized {categorized} of {total} transactions')
          "
