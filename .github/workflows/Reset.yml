# ============================================================================
# drop-database.yml - Drop All Database Tables (DESTRUCTIVE)
# ============================================================================
# WARNING: This workflow will DELETE ALL DATA from the database
# Use with extreme caution - this action cannot be undone!
# ============================================================================

name: Drop Database Tables

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DELETE ALL DATA" to confirm'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  drop-tables:
    name: Drop All Database Tables
    runs-on: ubuntu-latest
    
    # Add environment protection
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DELETE ALL DATA" ]; then
            echo "‚ùå ERROR: Confirmation text does not match!"
            echo "You must type 'DELETE ALL DATA' exactly to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation validated"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: LiquidSuite
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Show Warning
        run: |
          echo "‚ö†Ô∏è  =========================================="
          echo "‚ö†Ô∏è  WARNING: DESTRUCTIVE OPERATION"
          echo "‚ö†Ô∏è  =========================================="
          echo ""
          echo "This will DELETE ALL DATA from the database!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo ""
          echo "Proceeding in 5 seconds..."
          sleep 5
      
      - name: Drop All Tables with CASCADE
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üóëÔ∏è  Dropping all database tables with CASCADE..."
          echo ""
          
          python << 'PYTHON_SCRIPT'
          import sys
          import os
          sys.path.insert(0, '.')
          from lsuite import create_app
          from lsuite.extensions import db
          from sqlalchemy import text
          
          config_name = os.getenv('FLASK_ENV', 'production')
          app = create_app(config_name)
          
          with app.app_context():
              # Get all table names
              inspector = db.inspect(db.engine)
              tables = inspector.get_table_names()
              
              if not tables:
                  print("‚ö†Ô∏è  No tables found in database.")
                  sys.exit(0)
              
              print(f"üìä Found {len(tables)} tables to drop:")
              for table in tables:
                  print(f"  - {table}")
              
              print("\nüóëÔ∏è  Dropping tables with CASCADE...")
              
              # Drop each table individually with CASCADE
              dropped = 0
              for table in tables:
                  try:
                      print(f"  üóëÔ∏è  Dropping {table}...", end=" ")
                      db.session.execute(text(f'DROP TABLE IF EXISTS "{table}" CASCADE'))
                      db.session.commit()
                      print("‚úÖ")
                      dropped += 1
                  except Exception as e:
                      print(f"‚ùå Error: {e}")
                      db.session.rollback()
                      continue
              
              # Verify all tables are gone
              inspector = db.inspect(db.engine)
              remaining = inspector.get_table_names()
              
              print(f"\n‚úÖ Successfully dropped {dropped} tables")
              
              if remaining:
                  print(f"‚ö†Ô∏è  Warning: {len(remaining)} tables still remain:")
                  for table in remaining:
                      print(f"  - {table}")
                  sys.exit(1)
              else:
                  print("‚úÖ All tables successfully removed!")
          PYTHON_SCRIPT
          
          echo ""
          echo "‚úÖ Database tables dropped successfully!"
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "üìä Operation Summary"
          echo "===================="
          echo "Status: ‚úÖ SUCCESS"
          echo "Action: All tables dropped"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "‚ö†Ô∏è  The database is now empty!"
          echo "Next steps:"
          echo "  1. Run 'Initialize Database' workflow to recreate tables"
          echo "  2. Run 'Seed Categories' workflow to add default data"
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo ""
          echo "‚ùå Operation Failed"
          echo "===================="
          echo "The drop operation encountered an error."
          echo "Please check the logs above for details."
          echo "Database state may be inconsistent."
