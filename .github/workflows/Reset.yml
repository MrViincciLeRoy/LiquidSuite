# ============================================================================
# initialize-database.yml - Initialize Database Tables
# ============================================================================
# Creates all database tables and optionally seeds default categories
# ============================================================================

name: Initialize Database

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Database initialization action'
        required: true
        default: 'init-and-seed'
        type: choice
        options:
          - init-only
          - init-and-seed
          - seed-only
          - check-status
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  initialize-database:
    name: Initialize Database
    runs-on: ubuntu-latest
    
    # Add environment protection
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: LiquidSuite
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Initialize Database Tables
        if: github.event.inputs.action == 'init-only' || github.event.inputs.action == 'init-and-seed'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "📊 Creating database tables..."
          echo ""
          
          # First, check if we need to migrate existing tables
          python << 'CHECK_MIGRATION'
          import os
          from sqlalchemy import text, create_engine
          
          db_url = os.getenv('DATABASE_URL')
          engine = create_engine(db_url)
          
          with engine.connect() as conn:
              # Check if bank_transactions exists with old schema
              result = conn.execute(text("""
                  SELECT column_name 
                  FROM information_schema.columns 
                  WHERE table_name = 'bank_transactions' 
                  AND column_name = 'category'
              """))
              
              if result.fetchone():
                  print("⚠️  Old schema detected - migrating...")
                  trans = conn.begin()
                  try:
                      # Drop old column
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          DROP COLUMN IF EXISTS category CASCADE
                      """))
                      # Add new column
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD COLUMN IF NOT EXISTS category_id INTEGER
                      """))
                      # Add FK
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          DROP CONSTRAINT IF EXISTS fk_bank_transactions_category_id
                      """))
                      conn.execute(text("""
                          ALTER TABLE bank_transactions 
                          ADD CONSTRAINT fk_bank_transactions_category_id 
                          FOREIGN KEY (category_id) 
                          REFERENCES transaction_categories(id) 
                          ON DELETE SET NULL
                      """))
                      trans.commit()
                      print("✅ Schema migrated successfully!")
                  except Exception as e:
                      trans.rollback()
                      print(f"Migration failed: {e}")
          CHECK_MIGRATION
          
          echo ""
          python scripts/init_db.py init
          echo ""
          echo "✅ Database initialization complete!"
      
      - name: Seed Transaction Categories
        if: github.event.inputs.action == 'seed-only' || github.event.inputs.action == 'init-and-seed'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "🌱 Seeding transaction categories..."
          echo ""
          python scripts/seed_categories.py seed
          echo ""
          echo "✅ Categories seeded successfully!"
      
      - name: Check Database Status
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "🔍 Verifying database status..."
          echo ""
          python scripts/init_db.py check
      
      - name: List Categories
        if: github.event.inputs.action == 'seed-only' || github.event.inputs.action == 'init-and-seed'
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo ""
          echo "📋 Transaction Categories:"
          echo ""
          python scripts/seed_categories.py list
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "📊 Operation Summary"
          echo "===================="
          echo "Status: ✅ SUCCESS"
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          case "${{ github.event.inputs.action }}" in
            init-only)
              echo "✅ Database tables created"
              echo "Next step: Run workflow with 'seed-only' to add categories"
              ;;
            init-and-seed)
              echo "✅ Database initialized and seeded"
              echo "✅ Ready to use!"
              ;;
            seed-only)
              echo "✅ Categories added to database"
              ;;
            check-status)
              echo "✅ Database status checked"
              ;;
          esac
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo ""
          echo "❌ Operation Failed"
          echo "===================="
          echo "The initialization encountered an error."
          echo "Please check the logs above for details."
          echo ""
          echo "Common issues:"
          echo "  - Database connection failed"
          echo "  - Missing DATABASE_URL secret"
          echo "  - Invalid database credentials"
          echo "  - Network connectivity issues"
