# ============================================================================
# deploy-and-init-db.yml - Deploy to Render and Initialize Database
# ============================================================================
name: Deploy & Initialize Database

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Database action'
        required: true
        default: 'init'
        type: choice
        options:
          - init
          - seed
          - check
          - reset

jobs:
  # ===========================
  # Run Tests First
  # ===========================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: lsuite_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: LiquidSuite
    
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/lsuite_test
      SQLALCHEMY_DATABASE_URI: postgresql://test_user:test_password@localhost:5432/lsuite_test
      SECRET_KEY: test-secret-key
      FLASK_ENV: testing
      TESTING: "true"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=lsuite --cov-report=term
  
  # ===========================
  # Trigger Render Deployment
  # ===========================
  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Trigger Render Deploy Hook
        if: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
          echo "‚úÖ Deployment triggered on Render"
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting 120 seconds for deployment to complete..."
          sleep 120
  
  # ===========================
  # Initialize Database
  # ===========================
  init-database:
    name: Initialize Database
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: LiquidSuite
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Initialize Database
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.RENDER_DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.RENDER_DATABASE_URL }}
          SECRET_KEY: ${{ secrets.RENDER_SECRET_KEY }}
          FLASK_ENV: production
        run: |
          echo "üîß Initializing database..."
          python scripts/init_db.py init
      
      - name: Seed Categories
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.RENDER_DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.RENDER_DATABASE_URL }}
          SECRET_KEY: ${{ secrets.RENDER_SECRET_KEY }}
          FLASK_ENV: production
        run: |
          echo "üå± Seeding transaction categories..."
          python scripts/seed_categories.py seed
      
      - name: Check Database Status
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.RENDER_DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.RENDER_DATABASE_URL }}
          SECRET_KEY: ${{ secrets.RENDER_SECRET_KEY }}
          FLASK_ENV: production
        run: |
          echo "üîç Checking database status..."
          python scripts/init_db.py check
      
      - name: Notify Success
        run: |
          echo "‚úÖ Database initialized successfully!"
          echo "‚úÖ Categories seeded!"
          echo "üéâ Deployment complete!"

  # ===========================
  # Manual Database Actions
  # ===========================
  manual-db-action:
    name: Manual Database Action
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: LiquidSuite
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Database Action
        working-directory: LiquidSuite
        env:
          DATABASE_URL: ${{ secrets.RENDER_DATABASE_URL }}
          SQLALCHEMY_DATABASE_URI: ${{ secrets.RENDER_DATABASE_URL }}
          SECRET_KEY: ${{ secrets.RENDER_SECRET_KEY }}
          FLASK_ENV: production
        run: |
          ACTION="${{ github.event.inputs.action }}"
          echo "üîß Running database action: $ACTION"
          
          case $ACTION in
            init)
              python scripts/init_db.py init
              ;;
            seed)
              python scripts/seed_categories.py seed
              ;;
            check)
              python scripts/init_db.py check
              ;;
            reset)
              echo "‚ö†Ô∏è  Database reset is disabled in production for safety"
              echo "Please run manually if needed"
              exit 1
              ;;
            *)
              echo "Unknown action: $ACTION"
              exit 1
              ;;
          esac
