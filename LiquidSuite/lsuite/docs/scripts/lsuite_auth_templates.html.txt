<!-- ============================================================
     lsuite/templates/auth/login.html
     ============================================================ -->
{% extends "base.html" %}

{% block title %}Login - LSuite{% endblock %}

{% block content %}
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body p-5">
                <h3 class="text-center mb-4">
                    <i class="fas fa-file-invoice-dollar text-primary"></i>
                    <br>LSuite Login
                </h3>
                
                <form method="POST" action="{{ url_for('auth.login') }}">
                    {{ form.hidden_tag() }}
                    
                    <div class="mb-3">
                        {{ form.email.label(class="form-label") }}
                        {{ form.email(class="form-control" + (" is-invalid" if form.email.errors else ""), 
                                     placeholder="your@email.com") }}
                        {% if form.email.errors %}
                            <div class="invalid-feedback">
                                {{ form.email.errors[0] }}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        {{ form.password.label(class="form-label") }}
                        {{ form.password(class="form-control" + (" is-invalid" if form.password.errors else ""),
                                        placeholder="••••••••") }}
                        {% if form.password.errors %}
                            <div class="invalid-feedback">
                                {{ form.password.errors[0] }}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3 form-check">
                        {{ form.remember_me(class="form-check-input") }}
                        {{ form.remember_me.label(class="form-check-label") }}
                    </div>
                    
                    <div class="d-grid">
                        {{ form.submit(class="btn btn-primary btn-lg") }}
                    </div>
                </form>
                
                <hr class="my-4">
                
                <p class="text-center text-muted">
                    Don't have an account?
                    <a href="{{ url_for('auth.register') }}">Register here</a>
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}


<!-- ============================================================
     lsuite/templates/auth/register.html
     ============================================================ -->
{% extends "base.html" %}

{% block title %}Register - LSuite{% endblock %}

{% block content %}
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow">
            <div class="card-body p-5">
                <h3 class="text-center mb-4">Create Account</h3>
                
                <form method="POST" action="{{ url_for('auth.register') }}">
                    {{ form.hidden_tag() }}
                    
                    <div class="mb-3">
                        {{ form.username.label(class="form-label") }}
                        {{ form.username(class="form-control" + (" is-invalid" if form.username.errors else ""),
                                        placeholder="johndoe") }}
                        {% if form.username.errors %}
                            <div class="invalid-feedback">{{ form.username.errors[0] }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        {{ form.email.label(class="form-label") }}
                        {{ form.email(class="form-control" + (" is-invalid" if form.email.errors else ""),
                                     placeholder="john@example.com") }}
                        {% if form.email.errors %}
                            <div class="invalid-feedback">{{ form.email.errors[0] }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        {{ form.password.label(class="form-label") }}
                        {{ form.password(class="form-control" + (" is-invalid" if form.password.errors else ""),
                                        placeholder="••••••••") }}
                        {% if form.password.errors %}
                            <div class="invalid-feedback">{{ form.password.errors[0] }}</div>
                        {% endif %}
                        <small class="form-text text-muted">
                            Must be at least 8 characters
                        </small>
                    </div>
                    
                    <div class="mb-3">
                        {{ form.password2.label(class="form-label") }}
                        {{ form.password2(class="form-control" + (" is-invalid" if form.password2.errors else ""),
                                         placeholder="••••••••") }}
                        {% if form.password2.errors %}
                            <div class="invalid-feedback">{{ form.password2.errors[0] }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="d-grid">
                        {{ form.submit(class="btn btn-success btn-lg") }}
                    </div>
                </form>
                
                <hr class="my-4">
                
                <p class="text-center text-muted">
                    Already have an account?
                    <a href="{{ url_for('auth.login') }}">Login here</a>
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}


<!-- ============================================================
     lsuite/templates/auth/profile.html
     ============================================================ -->
{% extends "base.html" %}

{% block title %}Profile - LSuite{% endblock %}

{% block content %}
<div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-user-circle"></i> My Profile</h1>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Profile Information</h5>
            </div>
            <div class="card-body">
                <form method="POST" action="{{ url_for('auth.profile') }}">
                    {{ form.hidden_tag() }}
                    
                    <div class="mb-3">
                        {{ form.username.label(class="form-label") }}
                        {{ form.username(class="form-control" + (" is-invalid" if form.username.errors else "")) }}
                        {% if form.username.errors %}
                            <div class="invalid-feedback">{{ form.username.errors[0] }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        {{ form.email.label(class="form-label") }}
                        {{ form.email(class="form-control" + (" is-invalid" if form.email.errors else "")) }}
                        {% if form.email.errors %}
                            <div class="invalid-feedback">{{ form.email.errors[0] }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="d-flex justify-content-between">
                        {{ form.submit(class="btn btn-primary") }}
                        <a href="{{ url_for('auth.change_password') }}" class="btn btn-outline-secondary">
                            <i class="fas fa-lock"></i> Change Password
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Account Details</h5>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-5">User ID:</dt>
                    <dd class="col-sm-7">{{ current_user.id }}</dd>
                    
                    <dt class="col-sm-5">Status:</dt>
                    <dd class="col-sm-7">
                        <span class="badge bg-success">Active</span>
                    </dd>
                    
                    <dt class="col-sm-5">Admin:</dt>
                    <dd class="col-sm-7">
                        {% if current_user.is_admin %}
                            <span class="badge bg-danger">Yes</span>
                        {% else %}
                            <span class="badge bg-secondary">No</span>
                        {% endif %}
                    </dd>
                    
                    <dt class="col-sm-5">Member Since:</dt>
                    <dd class="col-sm-7">
                        {{ current_user.created_at.strftime('%Y-%m-%d') if current_user.created_at }}
                    </dd>
                </dl>
            </div>
        </div>
    </div>
</div>
{% endblock %}


<!-- ============================================================
     lsuite/static/css/style.css - Custom Styles
     ============================================================ -->
/* Custom LSuite Styles */

:root {
    --primary-color: #0d6efd;
    --success-color: #198754;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #0dcaf0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
}

/* Sidebar */
.sidebar {
    min-height: calc(100vh - 56px);
    box-shadow: inset -1px 0 0 rgba(0, 0, 0, .1);
}

.sidebar .nav-link {
    color: #333;
    padding: 0.75rem 1rem;
    font-weight: 500;
}

.sidebar .nav-link:hover {
    background-color: rgba(0, 0, 0, .05);
}

.sidebar .nav-link.active {
    color: var(--primary-color);
    background-color: rgba(13, 110, 253, .1);
    border-left: 3px solid var(--primary-color);
}

.sidebar .nav-link i {
    margin-right: 0.5rem;
    width: 20px;
}

.sidebar-heading {
    font-size: 0.75rem;
    text-transform: uppercase;
}

/* Cards */
.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, .075);
    transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);
}

.card-header {
    background-color: #fff;
    border-bottom: 1px solid rgba(0, 0, 0, .125);
    font-weight: 600;
}

/* Buttons */
.btn {
    border-radius: 0.375rem;
    font-weight: 500;
    padding: 0.5rem 1rem;
}

.btn i {
    margin-right: 0.25rem;
}

/* Tables */
.table {
    background-color: #fff;
}

.table thead th {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.875rem;
}

/* Badges */
.badge {
    padding: 0.375rem 0.75rem;
    font-weight: 500;
}

/* Forms */
.form-label {
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, .25);
}

/* Flash Messages */
.flash-messages {
    position: relative;
    z-index: 1000;
}

.alert {
    border-radius: 0.375rem;
    border: none;
}

.alert i {
    margin-right: 0.5rem;
}

/* Stats Cards */
.card.text-white .card-title {
    font-size: 0.875rem;
    font-weight: 600;
    opacity: 0.9;
}

.card.text-white .card-text {
    font-size: 2rem;
    font-weight: 700;
}

/* Loading Spinner */
.spinner-border-sm {
    width: 1rem;
    height: 1rem;
    border-width: 0.15em;
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* Responsive */
@media (max-width: 768px) {
    .sidebar {
        position: relative;
        min-height: auto;
    }
    
    main {
        margin-left: 0 !important;
    }
}

/* Print styles */
@media print {
    .sidebar,
    .navbar,
    .btn,
    .flash-messages {
        display: none !important;
    }
    
    main {
        margin-left: 0 !important;
    }
}


<!-- ============================================================
     lsuite/static/js/app.js - Custom JavaScript
     ============================================================ -->
// LSuite Custom JavaScript

// Auto-hide flash messages after 5 seconds
document.addEventListener('DOMContentLoaded', function() {
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(function(alert) {
        setTimeout(function() {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }, 5000);
    });
});

// Confirm delete actions
document.querySelectorAll('[data-confirm]').forEach(function(element) {
    element.addEventListener('click', function(e) {
        if (!confirm(this.getAttribute('data-confirm'))) {
            e.preventDefault();
        }
    });
});

// Form validation
(function() {
    'use strict';
    const forms = document.querySelectorAll('.needs-validation');
    Array.prototype.slice.call(forms).forEach(function(form) {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add('was-validated');
        }, false);
    });
})();

// Loading state for buttons
document.querySelectorAll('[data-loading]').forEach(function(button) {
    button.addEventListener('click', function() {
        const loadingText = this.getAttribute('data-loading');
        const originalText = this.innerHTML;
        
        this.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> ${loadingText}`;
        this.disabled = true;
        
        // Re-enable after 10 seconds (failsafe)
        setTimeout(function() {
            button.innerHTML = originalText;
            button.disabled = false;
        }, 10000);
    });
});

// Table row click
document.querySelectorAll('tr[data-href]').forEach(function(row) {
    row.style.cursor = 'pointer';
    row.addEventListener('click', function() {
        window.location.href = this.getAttribute('data-href');
    });
});

// Copy to clipboard
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function() {
        showToast('Copied to clipboard!', 'success');
    });
}

// Toast notifications
function showToast(message, type = 'info') {
    const toastHTML = `
        <div class="toast align-items-center text-white bg-${type} border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `;
    
    const toastContainer = document.querySelector('.toast-container') || createToastContainer();
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    
    const toastElement = toastContainer.lastElementChild;
    const toast = new bootstrap.Toast(toastElement);
    toast.show();
    
    toastElement.addEventListener('hidden.bs.toast', function() {
        toastElement.remove();
    });
}

function createToastContainer() {
    const container = document.createElement('div');
    container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
    document.body.appendChild(container);
    return container;
}

// API Helper
const API = {
    async get(url) {
        const response = await fetch(url, {
            headers: { 'Accept': 'application/json' }
        });
        if (!response.ok) throw new Error('API request failed');
        return response.json();
    },
    
    async post(url, data) {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data)
        });
        if (!response.ok) throw new Error('API request failed');
        return response.json();
    }
};

// Export for use in other scripts
window.LSuite = {
    copyToClipboard,
    showToast,
    API
};
